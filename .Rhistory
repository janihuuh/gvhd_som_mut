library(dplyr)
library(ggplot2)
library(data.table)
library(gridExtra)
library(RColorBrewer)
me=system("whoami", intern = T)
setwd(paste0("/Users/", me, "/Dropbox/gvhd_scrnaseq/"))
theme_set(theme_classic())
add_guide   <- guides(colour = guide_legend(override.aes = list(size=10)))
getPalette  <- colorRampPalette(brewer.pal(9, "Set1"))
getPalette2 <- colorRampPalette(brewer.pal(8, "Set2"))
getPalette3 <- colorRampPalette(brewer.pal(9, "Set3"))
## Run all fun_* codes
for(code in list.files("src_manuscript//R/", "fun", full.names = T, recursive = T)){
message(code)
source(code)
}
## mutate() can stop working with scater, and thus unloading scater might be needed
# detach("package:scran", unload=TRUE)
# detach("package:scater", unload=TRUE)
## Raw, no QC
gvhd <- readRDS("results/gvhd_raw.rds")
## Remove non-tcr cells as these could be the clonotype
cells.with.tcr = gvhd@meta.data %>% filter(!is.na(new_clonotypes_id)) %>% pull(barcode)
gvhd_tcr <- subset(gvhd, cells = cells.with.tcr)
gvhd=gvhd_tcr
gvhd
### Crate new sce-object
gvhd_counts   <- GetAssayData(gvhd)
gvhd_meta     <- gvhd@meta.data
gvhd_sce      <- SingleCellExperiment(assays = list(counts = gvhd_counts), colData = gvhd_meta)
gvhd_sce      <- calculateQCMetrics(gvhd_sce)
### Do basic filtering first, to not cofound the later analyses
viz_df  <- colData(gvhd_sce) %>% as.data.frame()
require(scran)
require(scater)
gvhd_sce      <- calculateQCMetrics(gvhd_sce)
### Do basic filtering first, to not cofound the later analyses
viz_df  <- colData(gvhd_sce) %>% as.data.frame()
min_mito     <- 0
max_mito     <- 15
min_ribo     <- 0
max_ribo     <- Inf
min_features <- 200
max_features <- 4000
min_counts   <- 0
# min_counts   <- 2e3
max_counts   <- Inf
min_pct50    <- 0
max_pct50    <- Inf
#### Violin plots
plot_qc_violin(viz_df, var_to_plot = "total_features_by_counts", grouping = "timepoint", min = min_features, max = max_features)
ggsave("results/qc/total_features.png", width = 6, height = 4)
plot_qc_violin(viz_df, var_to_plot = "total_counts", grouping = "timepoint", min = min_counts, max = max_counts) + scale_y_log10()
ggsave("results/qc/total_counts.png", width = 6, height = 4)
plot_qc_violin(viz_df, var_to_plot = "percent.mt", grouping = "timepoint", min = min_mito, max = max_mito)
ggsave("results/qc/percent_mt.png", width = 6, height = 4)
plot_qc_violin(viz_df, var_to_plot = "percent.ribo", grouping = "timepoint", min = min_ribo, max = max_ribo)
ggsave("results/qc/percent_ribo.png", width = 6, height = 4)
plot_qc_violin(viz_df, var_to_plot = "pct_counts_in_top_50_features", grouping = "timepoint", min = min_pct50, max = max_pct50)
ggsave("results/qc/pct_counts_in_top_50_features.png", width = 6, height = 4)
## Scatter plots
viz_df %>%
ggplot(aes(total_counts, total_features_by_counts, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + scale_x_log10() + scale_y_log10() +
geom_vline(xintercept = min_counts, linetype = "dotted") +
geom_vline(xintercept = max_counts, linetype = "dotted") +
geom_hline(yintercept = min_features, linetype = "dotted") +
geom_hline(yintercept = max_features, linetype = "dotted") + add_guide
ggsave("results/qc/counts_vs_genes.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(pct_counts_in_top_50_features, total_features_by_counts,color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
scale_y_log10() +
geom_hline(yintercept = min_features, linetype = "dotted") +
geom_hline(yintercept = max_features, linetype = "dotted") +
geom_vline(xintercept = min_pct50, linetype = "dotted") +
geom_vline(xintercept = max_pct50, linetype = "dotted")
ggsave("results/qc/nGene_vs_nUMIvs_top50features.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(percent.ribo, total_features_by_counts, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
scale_y_log10() +
geom_hline(yintercept = min_features, linetype = "dotted") +
geom_hline(yintercept = max_features, linetype = "dotted") +
geom_vline(xintercept = min_ribo, linetype = "dotted") +
geom_vline(xintercept = max_ribo, linetype = "dotted")
ggsave("results/qc/ribo_vs_genes.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(percent.mt, total_features_by_counts, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
scale_y_log10() +
geom_hline(yintercept = min_features, linetype = "dotted") +
geom_hline(yintercept = max_features, linetype = "dotted") +
geom_vline(xintercept = max_mito, linetype = "dotted")
ggsave("results/qc/mito_vs_genes.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(percent.ribo, percent.mt, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
geom_hline(yintercept = min_mito, linetype = "dotted") +
geom_hline(yintercept = max_mito, linetype = "dotted") +
geom_vline(xintercept = min_ribo, linetype = "dotted") +
geom_vline(xintercept = max_ribo, linetype = "dotted")
ggsave("results/qc/ribo_vs_mito.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(percent.ribo, pct_counts_in_top_50_features, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
geom_vline(xintercept = min_ribo, linetype = "dotted") +
geom_vline(xintercept = max_ribo, linetype = "dotted") +
geom_hline(yintercept = max_pct50, linetype = "dotted") +
geom_hline(yintercept = min_pct50, linetype = "dotted")
ggsave("results/qc/ribo_vs_top50features.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(percent.mt, pct_counts_in_top_50_features, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
geom_vline(xintercept = max_mito, linetype = "dotted") +
geom_hline(yintercept = max_pct50, linetype = "dotted") +
geom_hline(yintercept = min_pct50, linetype = "dotted")
ggsave("results/qc/mito_vs_top50features.png", width = 6, height = 4)
viz_df %>%
ggplot(aes(log10_total_features_by_counts, pct_counts_in_top_50_features, color = timepoint)) + geom_point(size = 0.3, alpha = 0.5) + add_guide +
geom_hline(yintercept = max_pct50, linetype = "dotted") +
geom_hline(yintercept = min_pct50, linetype = "dotted")
ggsave("results/qc/nGene_vs_nUMIvs_top50features.png", width = 10, height = 4)
## In total, we remove with the following conditions:
percent_mito_outlier <- viz_df %>% dplyr::filter(percent.mt > max_mito | percent.mt < min_mito)                                   %>% pull(barcode) %>% as.character()
percent_ribo_outlier <- viz_df %>% dplyr::filter(percent.ribo > max_ribo | percent.ribo < min_ribo)                               %>% pull(barcode) %>% as.character()
features_outlier     <- viz_df %>% dplyr::filter(total_features_by_counts < min_features | total_features_by_counts > max_features)                   %>% pull(barcode) %>% as.character()
umis_outlier         <- viz_df %>% dplyr::filter(total_counts > max_counts | total_counts < min_counts)                           %>% pull(barcode) %>% as.character()
pct_50_outlier       <- viz_df %>% dplyr::filter(pct_counts_in_top_50_features < min_pct50 | pct_counts_in_top_50_features > max_pct50) %>% pull(barcode) %>% as.character()
outlier_cells        <- c(percent_mito_outlier,
percent_ribo_outlier,
features_outlier,
umis_outlier,
pct_50_outlier)
reason               <- c(rep("percent_mito_outlier", length(percent_mito_outlier)),
rep("percent_ribo_outlier", length(percent_ribo_outlier)),
rep("features_outlier",     length(features_outlier)),
rep("umis_outlier",         length(umis_outlier)),
rep("pct_50_outlier",       length(pct_50_outlier)))
outlier_df <- data.frame(barcode = outlier_cells, reason = reason) %>% dplyr::mutate(from = substr(barcode, 1, 4))
outlier_df %>% group_by(from,reason) %>% summarise(n = n()) %>%
ggplot(aes(reorder(reason,n),n,fill=from,label=n)) + geom_bar(stat = "identity") + labs(x = "") + scale_fill_manual(values = brewer.pal(5, "Set1")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme_bw() + facet_wrap(~from)
ggsave("results/qc/outliers.png", width = 4, height = 3)
write.table(outlier_df, "results/qc/outliers.txt", sep = "\t", quote = F, row.names = F)
## Remove the cells from Seurat-object and save a new seurat-object
cells.to.use <- colnames(gvhd)[!colnames(gvhd) %in% outlier_df$barcode]
gvhd_2   <- subset(gvhd, cells = cells.to.use)
gvhd_meta <- gvhd@meta.data[gvhd@meta.data$barcode %in% cells.to.use, ]
gvhd_meta <- gvhd_meta[match(colnames(gvhd_2), gvhd_meta$barcode), ]
## Make sure that rownames and colnames match and they're in right order
rownames(gvhd_meta) == colnames(gvhd_2)
colnames(gvhd_2)    == gvhd_meta$barcode
gvhd_2@meta.data <- gvhd_meta
gvhd <- gvhd_2
rm(gvhd_2)
saveRDS(gvhd, "results/gvhd_qc.rds")
## mutate() and other dplyr functions can stop working with scater, and thus unloading scater might be needed
detach("package:scran", unload=TRUE)
detach("package:scater", unload=TRUE)
####################
scale_factor = 10e3     ## Scaling factor
n_hvgs       = 3000     ## How many HVGs to calculate (minus the clonality and unwanted variation genes)
n_pc_stdev   = 1.5      ## The minimun stdev value for PC to be accepted
res          = c(seq(0.1, 1, 0.1), seq(1.2, 2, 0.2), 2.5, 3)
####################
## Init output options
output_dir       <- paste0("results/hvg/")
dir.create(output_dir, showWarnings = F)
## Normalize
gvhd <- NormalizeData(gvhd, normalization.method = "LogNormalize", scale.factor = scale_factor)
## ==== Find HVGs with Seurat
# gvhd        <- FindVariableFeatures(gvhd, selection.method = "mvp", mean.cutoff = c(0.0125, 3), dispersion.cutoff = c(0.5, Inf))
gvhd <- FindVariableFeatures(gvhd, selection.method = "vst", nfeatures = 1e3)
seurat_hvg  <-  VariableFeatures(gvhd)
## Remove clonality and unwanted genes
clonality_genes <- getClonalityGenes(gvhd)
unwanted_genes  <- getUnwantedGenes(gvhd)
seurat_hvg      <- seurat_hvg[!seurat_hvg %in% clonality_genes]
seurat_hvg      <- seurat_hvg[!seurat_hvg %in% unwanted_genes]
length(seurat_hvg)
write.table(seurat_hvg, paste0(output_dir, "seurat_hvg.txt"), sep = "\t", quote = F, row.names = F)
## Visualize the HVG function
VariableFeatures(gvhd) <- seurat_hvg
## Scale data based on all genes
gvhd <- ScaleData(gvhd, features = rownames(gvhd))
## Perform  PCA based on the HVGs
gvhd <- RunPCA(gvhd, features = seurat_hvg, npcs = 50)
## Choose nPC based on stdev
nPCs <- sum(gvhd[["pca"]]@stdev > n_pc_stdev)
message(paste("nPCs:", nPCs, "\n"))
write.table(nPCs, paste0(output_dir, "nPCs.txt"), sep = "\t", quote = F, row.names = F)
## RunUMAP-function does not work
gvhd <- RunUMAP(gvhd, dims = 1:nPCs)
DimPlot(gvhd, reduction = "umap", label = T, group.by = "timepoint")
## RunUMAP-function does not work
set.seed(123)
gvhd <- RunUMAP(gvhd, dims = 1:nPCs)
seurat_hvg
1e3-length(seurat_hvg)
## Clustering
gvhd$RNA_snn_res.0.3 <- NULL
res       <- c(seq(0.1, 1, 0.1), seq(1.2, 2, 0.2), 2.5, 3)
gvhd      <- FindNeighbors(gvhd, reduction = "pca", dims = 1:nPCs)
gvhd      <- FindClusters(object = gvhd, resolution = res)
clustering_columns <- grep("res", colnames(gvhd@meta.data), value = T)
## Plot clustering results
p <- NULL
i <- 1
for(clustering_column in clustering_columns){
message(clustering_column)
nColors <- gvhd@meta.data[,clustering_column] %>% levels %>% length
p[[i]] <- DimPlot(gvhd, reduction = "umap", group.by = clustering_column, cols = getPalette(nColors), label = T) +
theme_classic() +
theme(legend.position = "none") +
labs(title = clustering_column)
i <- i + 1
}
png("results/final_clusters/umap_per_clustering_column.png", width = 1024, height = 1024)
do.call(grid.arrange, c(p, ncol = 4))
dev.off()
q <- NULL
i <- 1
for(clustering_column in clustering_columns){
message(clustering_column)
q[[i]] <- gvhd@meta.data[,clustering_column] %>% levels %>% length
i <- i + 1
}
data.frame(res,q) %>% ggplot(aes(res,q,label=q)) + theme_bw() + labs(x = "res parameter", y = "nClusters") + geom_text()
ggsave("results/final_clusters/scatter_res_per_cluster.png", width = 4, height = 3)
DimPlot(gvhd, reduction = "umap", group.by = "RNA_snn_res.0.4", cols = getPalette3(15), label = T)
#### Decide clustering on res.0.4 as it agrees best with the latent umap and plateus
Idents(gvhd) <- gvhd$RNA_snn_res.0.4
saveRDS(gvhd, "results/gvhd_tcr_fin.rds")
## Init output options
output_dir       <- paste0("results/final_clusters/")
dir.create(output_dir, showWarnings = F)
## Init visualisation object
viz_df <- cbind(gvhd@meta.data,
gvhd[["pca"]]@cell.embeddings[,1:6],
gvhd[["umap"]]@cell.embeddings,
cluster = Idents(gvhd))
write.table(viz_df, paste0(output_dir, "viz_df.txt"), sep = "\t", quote = F, row.names = F)
umap_mean <- data.frame(aggregate(UMAP_1 ~ cluster, viz_df, median), UMAP_2 = aggregate(UMAP_2 ~ cluster, viz_df, median)[,2])
nClusters <- levels(viz_df$cluster) %>% length
viz_df <- fread("results/final_clusters/viz_df.txt")
DimPlot(gvhd, label = T, repel = T, cols = getPalette3(15)) + theme_void() + theme(legend.position = "none")
ggsave(paste0(output_dir, "UMAP_clusters.png"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = as.factor(timepoint))) + geom_point(size = 0.3) + scale_color_manual(values = getPalette(5)[c(2,5)]) + add_guide + labs(color = "time point") + theme_void()
ggsave(paste0(output_dir, "UMAP_timepoint.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = !is.na(new_clonotypes_id))) + geom_point(size = 0.3, alpha = 0.5) + scale_color_manual(values = c("lightgrey", "salmon")) + add_guide + labs(color = "TCRab")
ggsave(paste0(output_dir, "UMAP_tcarb.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = log10(nFeature_RNA))) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_nFeature.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = log10(nCount_RNA))) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_nCount.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = ifelse(nCount_RNA < 1000, "suspect", "nonsuspect"))) + geom_point(size = 0.3, alpha = 0.5) + labs(color = "nCount_RNA < 1000") + add_guide
ggsave(paste0(output_dir, "UMAP_nCount1000.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = percent.mt)) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_percmito.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = percent.ribo)) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_percribo.pdf"), width = 8, height = 6)
## Plot individual clusters
p <- NULL
i <- 1
colors = getPalette(nClusters)
for(cluster_temp in levels(viz_df$cluster)){
p[[i]] <- ggplot() +
geom_point(data = subset(viz_df, cluster != cluster_temp), aes(x = UMAP_1, y = UMAP_2), color = "lightgrey", size = 0.8) +
geom_point(data = subset(viz_df, cluster == cluster_temp), aes(x = UMAP_1, y = UMAP_2), color = colors[i], size = 0.8) +
theme_void() + theme(legend.position = "none")
i <- i + 1
}
pdf(paste0(output_dir, "UMAP_per_cluster.pdf"), width = 8, height = 6)
p
dev.off()
## How much cells with TCRab per cluster?
viz_df %>% group_by(cluster) %>% summarise(has_tcrab = sum(!is.na(new_clonotypes_id)), n = n()) %>% mutate(freq = has_tcrab / n) %>%
ggplot(aes(cluster, freq, fill = cluster)) + geom_bar(stat = "identity") + coord_flip() + scale_fill_manual(values = getPalette(nClusters)) +
ylim(values = c(0,1)) + theme_bw() + theme(legend.position = "none") + labs(y = "cells with TCRa | TCRb | TCRab") + geom_hline(yintercept = 0.5, linetype = "dotted")
## Visualize time point changes
p <- calculateFoldchange_2v1(gvhd) %>% plotBarFoldchange
p
ggsave(plot=p, paste0(output_dir, "bar_timepoint_change_2_v_1.png"), width = 12, height = 6)
## Pie chart the clusters
p <- melt(table(Idents(gvhd))) %>%
ggplot(aes(x = "", y = value/sum(value), label = round(value/sum(value), 3), fill = as.factor(Var1))) +
geom_bar(stat = "identity", color = "lightgrey") +
coord_polar("y", start = 0) +
# geom_text() +
scale_fill_manual(values = getPalette(nClusters)) +
theme_minimal() +
labs(x = "", y = "", fill = "Clusters")
ggsave(plot = p, paste0(output_dir, "pie_cluster.png"), width = 8, height = 8)
p <- melt(table(Idents(gvhd))) %>%
ggplot(aes(as.factor(reorder(Var1, value)), value, label = value, fill = as.factor(Var1), label = value)) +
geom_bar(stat = "identity", color = "lightgrey") + geom_text() +
scale_fill_manual(values = getPalette(nClusters)) +
theme_minimal() + theme_bw() + theme(legend.position = "none") + coord_flip() + labs(x = "", y = "nCells")
ggsave(plot = p, paste0(output_dir, "bar_cluster.png"), width = 8, height = 8)
p <- viz_df %>%
ggplot(aes(cluster, nCount_RNA, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + scale_y_log10() + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_nCount_RNA.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, nFeature_RNA, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + scale_y_log10() + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_nFeature_RNA.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, percent.mt, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_percent_mt.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, percent.ribo, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_percent.ribo.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, percent.cycle, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_percent.cycle.png"), width = 12, height = 6)
## How patient specific the clusters are
p <- viz_df %>% group_by(timepoint, cluster) %>% summarise(n = n()) %>% mutate(freq = n/sum(n)) %>%
ggplot(aes(as.factor(timepoint), freq, fill = cluster)) + geom_bar(stat = "identity") + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + labs(x = "") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "bar_per_timepoint.png"), width = 6, height = 4)
p <- viz_df %>% group_by(cluster, timepoint) %>% summarise(n = n()) %>% mutate(freq = n/sum(n)) %>%
ggplot(aes(as.factor(cluster), freq, fill = as.factor(timepoint))) + geom_bar(stat = "identity") + scale_fill_manual(values = getPalette3(3)) + theme_bw() + labs(x = "", fill = "") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "bar_per_cluster.png"), width = 12, height = 4)
p <- viz_df %>% mutate(prepost = ifelse(timepoint == "1", "pre", "post")) %>% group_by(cluster, prepost) %>% summarise(n = n()) %>% mutate(freq = n/sum(n)) %>%
ggplot(aes(as.factor(cluster), freq, fill = as.factor(prepost))) + geom_bar(stat = "identity") + scale_fill_manual(values = getPalette(2)) + theme_bw() + labs(x = "", fill = "") + ggpubr::rotate_x_text(45) +
geom_hline(yintercept = 0.5, linetype = "dotted")
ggsave(plot = p, paste0(output_dir, "bar_per_prepost.png"), width = 12, height = 4)
## Init output options
output_dir       <- paste0("results/cluster_markers/")
dir.create(output_dir, showWarnings = F)
?FindAllMarkers
gvhd
table(Idents(gvhd))
174-107
FeaturePlot(gvhd, features = c("MS4A1", "LYZ"))
FeaturePlot(gvhd, features = c("MS4A1", "LYZ"), label = T)
### Remove cluster 5 as it is monocyte doublets
idents.to.keep = c(0:4, 6)
idents.to.keep
?subset
gvhd <- subset(gvhd, idents = idents.to.keep)
### Do the other steps
gvhd <- FindVariableFeatures(gvhd, selection.method = "vst", nfeatures = 1e3)
seurat_hvg  <-  VariableFeatures(gvhd)
clonality_genes <- getClonalityGenes(gvhd)
unwanted_genes  <- getUnwantedGenes(gvhd)
seurat_hvg      <- seurat_hvg[!seurat_hvg %in% clonality_genes]
seurat_hvg      <- seurat_hvg[!seurat_hvg %in% unwanted_genes]
write.table(seurat_hvg, paste0(output_dir, "seurat_hvg.txt"), sep = "\t", quote = F, row.names = F)
VariableFeatures(gvhd) <- seurat_hvg
p <- plotSeuratHVG(gvhd, top_n = 50)
ggsave(plot = p, paste0(output_dir, "seurat_hvg.png"), width = 8, height = 6)
## Scale data based on all genes
gvhd <- ScaleData(gvhd, features = rownames(gvhd))
gvhd <- RunPCA(gvhd, features = seurat_hvg, npcs = 50)
nPCs <- sum(gvhd[["pca"]]@stdev > n_pc_stdev)
message(paste("nPCs:", nPCs, "\n"))
write.table(nPCs, paste0(output_dir, "nPCs.txt"), sep = "\t", quote = F, row.names = F)
gvhd <- RunUMAP(gvhd, dims = 1:nPCs)
DimPlot(gvhd, reduction = "umap", label = T, group.by = "timepoint")
DimPlot(gvhd, reduction = "umap", label = T)
saveRDS(gvhd, "results/gvhd_tcr_fin.rds")
## Init output options
output_dir       <- paste0("results/final_clusters/")
dir.create(output_dir, showWarnings = F)
## Init visualisation object
viz_df <- cbind(gvhd@meta.data,
gvhd[["pca"]]@cell.embeddings[,1:6],
gvhd[["umap"]]@cell.embeddings,
cluster = Idents(gvhd))
write.table(viz_df, paste0(output_dir, "viz_df.txt"), sep = "\t", quote = F, row.names = F)
umap_mean <- data.frame(aggregate(UMAP_1 ~ cluster, viz_df, median), UMAP_2 = aggregate(UMAP_2 ~ cluster, viz_df, median)[,2])
nClusters <- levels(viz_df$cluster) %>% length
viz_df <- fread("results/final_clusters/viz_df.txt")
### ===== Visualize UMAP QC
DimPlot(gvhd, label = T, repel = T, cols = getPalette3(15)) + theme_void() + theme(legend.position = "none")
ggsave(paste0(output_dir, "UMAP_clusters.png"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = as.factor(timepoint))) + geom_point(size = 0.3) + scale_color_manual(values = getPalette(5)[c(2,5)]) + add_guide + labs(color = "time point") + theme_void()
ggsave(paste0(output_dir, "UMAP_timepoint.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = !is.na(new_clonotypes_id))) + geom_point(size = 0.3, alpha = 0.5) + scale_color_manual(values = c("lightgrey", "salmon")) + add_guide + labs(color = "TCRab")
ggsave(paste0(output_dir, "UMAP_tcarb.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = log10(nFeature_RNA))) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_nFeature.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = log10(nCount_RNA))) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_nCount.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = ifelse(nCount_RNA < 1000, "suspect", "nonsuspect"))) + geom_point(size = 0.3, alpha = 0.5) + labs(color = "nCount_RNA < 1000") + add_guide
ggsave(paste0(output_dir, "UMAP_nCount1000.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = percent.mt)) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_percmito.pdf"), width = 8, height = 6)
viz_df %>% ggplot(aes(UMAP_1, UMAP_2, color = percent.ribo)) + geom_point(size = 0.3, alpha = 0.5) + scale_color_viridis_c()
ggsave(paste0(output_dir, "UMAP_percribo.pdf"), width = 8, height = 6)
## Plot individual clusters
p <- NULL
i <- 1
colors = getPalette(nClusters)
for(cluster_temp in levels(viz_df$cluster)){
p[[i]] <- ggplot() +
geom_point(data = subset(viz_df, cluster != cluster_temp), aes(x = UMAP_1, y = UMAP_2), color = "lightgrey", size = 0.8) +
geom_point(data = subset(viz_df, cluster == cluster_temp), aes(x = UMAP_1, y = UMAP_2), color = colors[i], size = 0.8) +
theme_void() + theme(legend.position = "none")
i <- i + 1
}
pdf(paste0(output_dir, "UMAP_per_cluster.pdf"), width = 8, height = 6)
p
dev.off()
## How much cells with TCRab per cluster?
viz_df %>% group_by(cluster) %>% summarise(has_tcrab = sum(!is.na(new_clonotypes_id)), n = n()) %>% mutate(freq = has_tcrab / n) %>%
ggplot(aes(cluster, freq, fill = cluster)) + geom_bar(stat = "identity") + coord_flip() + scale_fill_manual(values = getPalette(nClusters)) +
ylim(values = c(0,1)) + theme_bw() + theme(legend.position = "none") + labs(y = "cells with TCRa | TCRb | TCRab") + geom_hline(yintercept = 0.5, linetype = "dotted")
ggsave(paste0(output_dir, "bar_cluster_with_tcrab.png"), width = 8, height = 6)
## Visualize time point changes
p <- calculateFoldchange_2v1(gvhd) %>% plotBarFoldchange
ggsave(plot=p, paste0(output_dir, "bar_timepoint_change_2_v_1.png"), width = 12, height = 6)
## Pie chart the clusters
p <- melt(table(Idents(gvhd))) %>%
ggplot(aes(x = "", y = value/sum(value), label = round(value/sum(value), 3), fill = as.factor(Var1))) +
geom_bar(stat = "identity", color = "lightgrey") +
coord_polar("y", start = 0) +
# geom_text() +
scale_fill_manual(values = getPalette(nClusters)) +
theme_minimal() +
labs(x = "", y = "", fill = "Clusters")
ggsave(plot = p, paste0(output_dir, "pie_cluster.png"), width = 8, height = 8)
p <- melt(table(Idents(gvhd))) %>%
ggplot(aes(as.factor(reorder(Var1, value)), value, label = value, fill = as.factor(Var1), label = value)) +
geom_bar(stat = "identity", color = "lightgrey") + geom_text() +
scale_fill_manual(values = getPalette(nClusters)) +
theme_minimal() + theme_bw() + theme(legend.position = "none") + coord_flip() + labs(x = "", y = "nCells")
ggsave(plot = p, paste0(output_dir, "bar_cluster.png"), width = 8, height = 8)
p <- viz_df %>%
ggplot(aes(cluster, nCount_RNA, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + scale_y_log10() + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_nCount_RNA.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, nFeature_RNA, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + scale_y_log10() + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_nFeature_RNA.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, percent.mt, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_percent_mt.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, percent.ribo, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_percent.ribo.png"), width = 12, height = 6)
p <- viz_df %>%
ggplot(aes(cluster, percent.cycle, fill = cluster)) + geom_violin(alpha = 0.3) + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + theme(legend.position = "none") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "violin_percent.cycle.png"), width = 12, height = 6)
## How patient specific the clusters are
p <- viz_df %>% group_by(timepoint, cluster) %>% summarise(n = n()) %>% mutate(freq = n/sum(n)) %>%
ggplot(aes(as.factor(timepoint), freq, fill = cluster)) + geom_bar(stat = "identity") + scale_fill_manual(values = getPalette(nClusters)) + theme_bw() + labs(x = "") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "bar_per_timepoint.png"), width = 6, height = 4)
p <- viz_df %>% group_by(cluster, timepoint) %>% summarise(n = n()) %>% mutate(freq = n/sum(n)) %>%
ggplot(aes(as.factor(cluster), freq, fill = as.factor(timepoint))) + geom_bar(stat = "identity") + scale_fill_manual(values = getPalette3(3)) + theme_bw() + labs(x = "", fill = "") + ggpubr::rotate_x_text(45)
ggsave(plot = p, paste0(output_dir, "bar_per_cluster.png"), width = 12, height = 4)
p <- viz_df %>% mutate(prepost = ifelse(timepoint == "1", "pre", "post")) %>% group_by(cluster, prepost) %>% summarise(n = n()) %>% mutate(freq = n/sum(n)) %>%
ggplot(aes(as.factor(cluster), freq, fill = as.factor(prepost))) + geom_bar(stat = "identity") + scale_fill_manual(values = getPalette(2)) + theme_bw() + labs(x = "", fill = "") + ggpubr::rotate_x_text(45) +
geom_hline(yintercept = 0.5, linetype = "dotted")
ggsave(plot = p, paste0(output_dir, "bar_per_prepost.png"), width = 12, height = 4)
######### Markers
## Init output options
output_dir       <- paste0("results/cluster_markers/")
dir.create(output_dir, showWarnings = F)
dir.create("results/mutated_clonotype/", showWarnings = F)
gvhd$pathological_clonotype <- "no"
gvhd$pathological_clonotype[gvhd$new_clonotypes_id %in% c("gvhd_clonotype1", "gvhd_clonotype2")] <- "clonotype"
DimPlot(gvhd, reduction = "umap", group.by = "pathological_clonotype", label = T, repel = T, split.by = "pathological_clonotype", cols = getPalette(4)) + theme(legend.position = "none")
ggsave("results/manuscript/umap_vb20clonotypes.pdf", width = 12, height = )
DimPlot(gvhd, reduction = "umap", group.by = "big_clonotype", label = T, repel = T, split.by = "pathological_clonotype", cols = getPalette(4))
## Where is the mutated clonotype
table(gvhd$RNA_snn_res.0.4, gvhd$big_clonotype) %>% melt %>% group_by(Var2) %>% mutate(prop = value / sum(value)) %>%
ggplot(aes(Var1, prop, fill = Var2)) + geom_bar(stat = "identity", position = "dodge")
## Where is the mutated clonotype
table(gvhd$RNA_snn_res.0.4, gvhd$pathological_clonotype) %>% melt %>% group_by(Var2) %>% mutate(prop = value / sum(value)) %>%
ggplot(aes(Var1, prop, fill = Var2)) + geom_bar(stat = "identity", position = "dodge")
## Analyse the cluster 0 and 1; i.e. the cluster with the mutatated clone
gvhd_cytotoxic <- subset(gvhd, idents = c(0,1))
## Add meta.data and add as idents
Idents(gvhd_cytotoxic) <- as.factor(gvhd_cytotoxic$pathological_clonotype)
Idents(gvhd_cytotoxic)
## Test the differences
cluster_markers           <- FindMarkers(object = gvhd_cytotoxic, ident.1 = "clonotype", ident.2 = "no", only.pos = F, min.pct = 0.001, logfc.threshold = 0.01, do.print = T, test.use = "t", return.thresh = 1)
cluster_markers$direction <- ifelse(cluster_markers$avg_logFC > 0, "up", "down")
cluster_markers$gene      <- rownames(cluster_markers)
write.table(cluster_markers, file = "results/mutated_clonotype/cluster_markers_clonotype.txt", quote = F, row.names = F, sep = "\t")
ggplot() +
geom_point(data = subset(cluster_markers, p_val_adj > 0.05), aes(avg_logFC, -log(p_val, base = 100)), shape = 21, color = "lightgrey", alpha = 0.8) +
geom_point(data = subset(cluster_markers, p_val_adj < 0.05), aes(avg_logFC, -log(p_val, base = 100), color = direction)) +
ggrepel::geom_label_repel(data  = subset(cluster_markers, p_val_adj < 1e-100 & !gene %in% clonality_genes & !gene %in% unwanted_genes), aes(avg_logFC, -log(p_val, base = 100), label = gene, color = direction), vjust = 2) +
scale_color_manual(values = c("darkgrey", "darkred")) +
labs(x = "avg logFC", y = "-log100(pval)") +
theme_bw() + theme(legend.position = "none") + xlim(values = c(-2, 2))
ggsave("results/mutated_clonotype/volcano/clonotype_markers_volcanoplot.pdf", width = 10, height = 8)
## For GSEA; remove clonality genes
rnk             <- data.frame(Name = cluster_markers$gene, metric = cluster_markers$avg_logFC) %>% arrange(desc(metric))
rnk             <- rnk[!rnk$Name %in% clonality_genes, ]
write.table(rnk, file = "results/mutated_clonotype/cluster_markers_clonotype_for_gsea.rnk", quote = F, row.names = F, sep = "\t")
#### Numbers
table(gvhd$pathological_clonotype)
#### Numbers
gvhd %>% group_by(pathological_clonotype)
#### Numbers
gvhd@meta.data %>% group_by(pathological_clonotype) %>% summarise(n = n()) %>% mutate(prop = n /sum(n))
gvhd@meta.data %>% group_by(pathological_clonotype, timepoint) %>% summarise(n = n()) %>% mutate(prop = n /sum(n))
#### Numbers
gvhd$cluster <- Idents(gvhd)
gvhd@meta.data %>% group_by(cluster, timepoint) %>% summarise(n = n()) %>% mutate(prop = n /sum(n))
gvhd@meta.data %>% group_by(pathological_clonotype, cluster) %>% summarise(n = n()) %>% mutate(prop = n /sum(n))
0.858+0.124+0.00239
## Volcano plot
cluster_markers <- fread("results/mutated_clonotype/cluster_markers_clonotype.txt")
cluster_markers$p_val_adj
cluster_markers %>% filter(p_val_adj < 0.05)
cluster_markers %>% filter(p_val_adj < 0.05) %>% group_by(dir)
cluster_markers %>% filter(p_val_adj < 0.05) %>% group_by(direction) %>% summarise(n = n())
601+589
gvhd
unique(gvhd$new_clonotypes_id) %>% length
gvhd@meta.data %>% group_by(new_clonotypes_id) %>% summarise(n = n()) %>% mutate(prop = n/sum(n))
gvhd@meta.data %>% group_by(new_clonotypes_id) %>% summarise(n = n()) %>% mutate(prop = n/sum(n)) %>% arrange(desc(prop))
gvhd
cd4_tenx <- readRDS("results/cd4_tenx_seurat.rds")
cd4_tenx
